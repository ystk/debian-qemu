Origin: https://git.qemu.org/?p=qemu.git;a=commitdiff;h=813212288970c39b1800f63e83ac6e96588095c6
Origin: https://git.qemu.org/?p=qemu.git;a=commitdiff;h=b8d7f1bc59276fec85e4d09f1567613a3e14d31e
Reviewed-by: Sylvain Beucler <beuc@debian.org>
Last-Update: 2021-02-11

From: Paolo Bonzini <pbonzini@redhat.com>
Date: Tue, 1 Dec 2020 12:09:26 +0000 (+0100)
Subject: ide: atapi: assert that the buffer pointer is in range
X-Git-Tag: v5.2.0-rc4~1
X-Git-Url: https://git.qemu.org/?p=qemu.git;a=commitdiff_plain;h=813212288970c39b1800f63e83ac6e96588095c6

ide: atapi: assert that the buffer pointer is in range

A case was reported where s->io_buffer_index can be out of range.
The report skimped on the details but it seems to be triggered
by s->lba == -1 on the READ/READ CD paths (e.g. by sending an
ATAPI command with LBA = 0xFFFFFFFF).  For now paper over it
with assertions.  The first one ensures that there is no overflow
when incrementing s->io_buffer_index, the second checks for the
buffer overrun.

Note that the buffer overrun is only a read, so I am not sure
if the assertion failure is actually less harmful than the overrun.

Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
Message-id: 20201201120926.56559-1-pbonzini@redhat.com
Reviewed-by: Kevin Wolf <kwolf@redhat.com>
Signed-off-by: Peter Maydell <peter.maydell@linaro.org>
---

From: Prasad J Pandit <pjp@fedoraproject.org>
Date: Mon, 18 Jan 2021 11:51:30 +0000 (+0530)
Subject: ide: atapi: check logical block address and read size (CVE-2020-29443)
X-Git-Url: https://git.qemu.org/?p=qemu.git;a=commitdiff_plain;h=b8d7f1bc59276fec85e4d09f1567613a3e14d31e

ide: atapi: check logical block address and read size (CVE-2020-29443)

While processing ATAPI cmd_read/cmd_read_cd commands,
Logical Block Address (LBA) maybe invalid OR closer to the last block,
leading to an OOB access issues. Add range check to avoid it.

Fixes: CVE-2020-29443
Reported-by: Wenxiang Qian <leonwxqian@gmail.com>
Suggested-by: Paolo Bonzini <pbonzini@redhat.com>
Reviewed-by: Paolo Bonzini <pbonzini@redhat.com>
Signed-off-by: Prasad J Pandit <pjp@fedoraproject.org>
Message-Id: <20210118115130.457044-1-ppandit@redhat.com>
Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
---

Index: qemu-2.1+dfsg/hw/ide/atapi.c
===================================================================
--- qemu-2.1+dfsg.orig/hw/ide/atapi.c
+++ qemu-2.1+dfsg/hw/ide/atapi.c
@@ -231,6 +231,9 @@ void ide_atapi_cmd_reply_end(IDEState *s
             s->packet_transfer_size -= size;
             s->elementary_transfer_size -= size;
             s->io_buffer_index += size;
+            assert(size <= s->io_buffer_total_len);
+            assert(s->io_buffer_index <= s->io_buffer_total_len);
+
             ide_transfer_start(s, s->io_buffer + s->io_buffer_index - size,
                                size, ide_atapi_cmd_reply_end);
             ide_set_irq(s->bus);
@@ -267,6 +270,8 @@ static void ide_atapi_cmd_reply(IDEState
 static void ide_atapi_cmd_read_pio(IDEState *s, int lba, int nb_sectors,
                                    int sector_size)
 {
+    assert(0 <= lba && lba < (s->nb_sectors >> 2));
+
     s->lba = lba;
     s->packet_transfer_size = nb_sectors * sector_size;
     s->elementary_transfer_size = 0;
@@ -365,6 +370,8 @@ eot:
 static void ide_atapi_cmd_read_dma(IDEState *s, int lba, int nb_sectors,
                                    int sector_size)
 {
+    assert(0 <= lba && lba < (s->nb_sectors >> 2));
+
     s->lba = lba;
     s->packet_transfer_size = nb_sectors * sector_size;
     s->io_buffer_index = 0;
@@ -806,35 +813,49 @@ static void cmd_prevent_allow_medium_rem
 
 static void cmd_read(IDEState *s, uint8_t* buf)
 {
-    int nb_sectors, lba;
+    unsigned int nb_sectors, lba;
+
+    /* Total logical sectors of ATAPI_SECTOR_SIZE(=2048) bytes */
+    uint64_t total_sectors = s->nb_sectors >> 2;
 
     if (buf[0] == GPCMD_READ_10) {
         nb_sectors = ube16_to_cpu(buf + 7);
     } else {
         nb_sectors = ube32_to_cpu(buf + 6);
     }
-
-    lba = ube32_to_cpu(buf + 2);
     if (nb_sectors == 0) {
         ide_atapi_cmd_ok(s);
         return;
     }
 
+    lba = ube32_to_cpu(buf + 2);
+    if (lba >= total_sectors || lba + nb_sectors - 1 >= total_sectors) {
+        ide_atapi_cmd_error(s, ILLEGAL_REQUEST, ASC_LOGICAL_BLOCK_OOR);
+        return;
+    }
+
     ide_atapi_cmd_read(s, lba, nb_sectors, 2048);
 }
 
 static void cmd_read_cd(IDEState *s, uint8_t* buf)
 {
-    int nb_sectors, lba, transfer_request;
+    unsigned int nb_sectors, lba, transfer_request;
 
-    nb_sectors = (buf[6] << 16) | (buf[7] << 8) | buf[8];
-    lba = ube32_to_cpu(buf + 2);
+    /* Total logical sectors of ATAPI_SECTOR_SIZE(=2048) bytes */
+    uint64_t total_sectors = s->nb_sectors >> 2;
 
+    nb_sectors = (buf[6] << 16) | (buf[7] << 8) | buf[8];
     if (nb_sectors == 0) {
         ide_atapi_cmd_ok(s);
         return;
     }
 
+    lba = ube32_to_cpu(buf + 2);
+    if (lba >= total_sectors || lba + nb_sectors - 1 >= total_sectors) {
+        ide_atapi_cmd_error(s, ILLEGAL_REQUEST, ASC_LOGICAL_BLOCK_OOR);
+        return;
+    }
+
     transfer_request = buf[9];
     switch(transfer_request & 0xf8) {
     case 0x00:
